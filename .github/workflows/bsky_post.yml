name: Post new blog entries to Bluesky

on:
  push:
    branches:
      - main

jobs:
  bluesky-post:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download posted permalinks artifact
        id: download_artifact
        uses: actions/download-artifact@v3
        with:
          name: posted-permalinks
          path: ./state || echo '{}' > ./state/posted.json

      - name: Parse markdown files to find new posts
        id: find_new_posts
        run: |
          # Parse all markdown files changed in this commit
          # Assuming frontmatter format YAML and frontmatter parser 'yq' installed for simplicity
          mkdir new_posts
          for file in $(git diff --name-only HEAD~1 HEAD | grep '\.md$'); do
            if grep -q "post_to_bsky: true" "$file"; then
              permalink=$(yq e '.permalink' "$file")
              echo "{\"file\": \"$file\", \"permalink\": \"$permalink\"}" >> posts.json
            fi
          done
          cat posts.json
          echo "::set-output name=posts::$(cat posts.json | jq -s .)"

      - name: Filter new posts and post to Bluesky
        id: post_to_bsky
        run: |
          # Load posted permalinks
          posted_file="./state/posted.json"
          if [[ -f $posted_file ]]; then
            posted=$(cat $posted_file)
          else
            posted="[]"
          fi

          posts="${{ steps.find_new_posts.outputs.posts }}"
          new_post_permalinks="[]"

          # Check each post's permalink against posted list
          for row in $(echo "$posts" | jq -c '.[]'); do
            permalink=$(echo "$row" | jq -r '.permalink')
            if ! echo "$posted" | jq -e --arg p "$permalink" 'index($p)' > /dev/null; then
              echo "Posting new permalink: $permalink"
              # Here you would call bluesky-post action or script with post details
              # e.g., myConsciousness/bluesky-post or API call

              # Append to new posted list array
              new_post_permalinks=$(echo $new_post_permalinks | jq --arg p "$permalink" '. + [$p]')
            else
              echo "Permalink already posted: $permalink, skipping"
            fi
          done

          # Merge posted with new_post_permalinks and save
          updated_posted=$(echo "$posted" "$new_post_permalinks" | jq -s '.[0] + .[1] | unique')

          echo "$updated_posted" > $posted_file
          echo "::set-output name=updated_posted::$updated_posted"

      - name: Upload updated posted permalinks artifact
        uses: actions/upload-artifact@v3
        with:
          name: posted-permalinks
          path: ./state/posted.json
